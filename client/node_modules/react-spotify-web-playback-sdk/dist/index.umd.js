(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
  (global = global || self, factory(global.reactSpotifyWebPlaybackSdk = {}, global.React));
}(this, (function (exports, React) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

  var MUST_BE_WRAPPED_MESSAGE = "Component must be wrapped with WebPlaybackSDK.";
  var SPOTIFY_WEB_PLAYBACK_SDK_URL = "https://sdk.scdn.co/spotify-player.js";

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  var WebPlaybackSDKReadyContext = React.createContext(undefined);
  var WebPlaybackSDKReadyProvider = function WebPlaybackSDKReadyProvider(_ref) {
    var children = _ref.children;

    var _useState = React.useState(false),
        webPlaybackSDKReady = _useState[0],
        setWebPlaybackSDKReady = _useState[1];

    React.useEffect(function () {
      window.onSpotifyWebPlaybackSDKReady = function () {
        setWebPlaybackSDKReady(true);
      };
    }, []);
    return React__default['default'].createElement(WebPlaybackSDKReadyContext.Provider, {
      value: webPlaybackSDKReady
    }, children);
  };
  function useWebPlaybackSDKReady() {
    var value = React.useContext(WebPlaybackSDKReadyContext);
    if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);
    return value;
  }

  var PlayerContext = React.createContext(undefined);
  var SpotifyPlayerProvider = function SpotifyPlayerProvider(_ref) {
    var children = _ref.children,
        initialDeviceName = _ref.initialDeviceName,
        getOAuthToken = _ref.getOAuthToken,
        initialVolume = _ref.initialVolume,
        connectOnInitialized = _ref.connectOnInitialized;

    var _useState = React.useState(null),
        player = _useState[0],
        setPlayer = _useState[1];

    var webPlaybackSDKReady = useWebPlaybackSDKReady(); // to get the latest function.

    var getOAuthTokenRef = React.useRef(getOAuthToken);
    getOAuthTokenRef.current = getOAuthToken; // create Spotify.Player instance.

    React.useEffect(function () {
      if (webPlaybackSDKReady) {
        var _player = new Spotify.Player({
          name: initialDeviceName,
          getOAuthToken: function getOAuthToken(callback) {
            return getOAuthTokenRef.current(callback);
          },
          volume: initialVolume
        });

        setPlayer(_player);

        if (connectOnInitialized) {
          _player.connect();
        }

        return function () {
          return _player.disconnect();
        };
      }
    }, // `deviceName` and `volume` are intentionally not passed.
    // When they are changed, they will be applied with the following useUpdateEffect.
    [connectOnInitialized, webPlaybackSDKReady]);
    return React__default['default'].createElement(PlayerContext.Provider, {
      value: player,
      children: children
    });
  };
  function useSpotifyPlayer() {
    var value = React.useContext(PlayerContext);
    if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);
    return value;
  }

  var DeviceContext = React.createContext(undefined);
  var DeviceProvider = function DeviceProvider(_ref) {
    var children = _ref.children;

    var _useState = React.useState(null),
        device = _useState[0],
        setDevice = _useState[1];

    var player = useSpotifyPlayer();
    React.useEffect(function () {
      if (player === null) return;

      var ready = function ready(device) {
        setDevice(_extends({}, device, {
          status: "ready"
        }));
      };

      var notReady = function notReady(device) {
        setDevice(_extends({}, device, {
          status: "not_ready"
        }));
      };

      player.addListener("ready", ready);
      player.addListener("not_ready", notReady);
      return function () {
        player.removeListener("ready", ready);
        player.removeListener("not_ready", notReady);
      };
    }, [player]);
    return React__default['default'].createElement(DeviceContext.Provider, {
      value: device,
      children: children
    });
  };
  function usePlayerDevice() {
    var value = React.useContext(DeviceContext);
    if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);
    return value;
  }

  var ErrorStateContext = React.createContext(undefined);
  var ErrorStateProvider = function ErrorStateProvider(_ref) {
    var children = _ref.children;

    var _useState = React.useState(null),
        errorState = _useState[0],
        setErrorState = _useState[1];

    var player = useSpotifyPlayer();
    React.useEffect(function () {
      if (player === null) return;

      var onInitializationError = function onInitializationError(error) {
        setErrorState(_extends({}, error, {
          type: "initialization_error"
        }));
      };

      var onAuthenticationError = function onAuthenticationError(error) {
        setErrorState(_extends({}, error, {
          type: "authentication_error"
        }));
      };

      var onAccountError = function onAccountError(error) {
        setErrorState(_extends({}, error, {
          type: "account_error"
        }));
      };

      var onPlaybackError = function onPlaybackError(error) {
        setErrorState(_extends({}, error, {
          type: "playback_error"
        }));
      };

      player.addListener("initialization_error", onInitializationError);
      player.addListener("authentication_error", onAuthenticationError);
      player.addListener("account_error", onAccountError);
      player.addListener("playback_error", onPlaybackError);
      return function () {
        player.removeListener("initialization_error", onInitializationError);
        player.removeListener("authentication_error", onAuthenticationError);
        player.removeListener("account_error", onAccountError);
        player.removeListener("playback_error", onPlaybackError);
      };
    }, [player]);
    return React__default['default'].createElement(ErrorStateContext.Provider, {
      value: errorState,
      children: children
    });
  };
  function useErrorState() {
    var value = React.useContext(ErrorStateContext);
    if (value === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);
    return value;
  }

  var PlaybackStateContext = React.createContext(undefined);
  var PlaybackStateProvider = function PlaybackStateProvider(_ref) {
    var children = _ref.children;

    var _useState = React.useState(null),
        playbackState = _useState[0],
        setPlaybackState = _useState[1];

    var player = useSpotifyPlayer();
    React.useEffect(function () {
      if (player === null) return;

      var playerStateChanged = function playerStateChanged(state) {
        setPlaybackState(state);
      };

      player.addListener("player_state_changed", playerStateChanged);
      return function () {
        return player.removeListener("player_state_changed", playerStateChanged);
      };
    }, [player]);
    return React__default['default'].createElement(PlaybackStateContext.Provider, {
      value: playbackState,
      children: children
    });
  };
  function usePlaybackState(interval, durationMS) {
    if (interval === void 0) {
      interval = false;
    }

    if (durationMS === void 0) {
      durationMS = 1000;
    }

    var fromContext = React.useContext(PlaybackStateContext);
    if (fromContext === undefined) throw new Error(MUST_BE_WRAPPED_MESSAGE);

    var _useState2 = React.useState(fromContext),
        playbackState = _useState2[0],
        setPlaybackState = _useState2[1];

    var player = useSpotifyPlayer();
    React.useEffect(function () {
      return setPlaybackState(fromContext);
    }, [fromContext]);
    var playbackStateIsNull = playbackState === null;
    React.useEffect(function () {
      if (!interval) return;
      if (player === null) return;
      if (playbackStateIsNull) return;
      if (playbackState.paused) return;
      var intervalId = window.setInterval(function () {
        try {
          return Promise.resolve(player.getCurrentState()).then(function (newState) {
            setPlaybackState(newState);
          });
        } catch (e) {
          return Promise.reject(e);
        }
      }, durationMS);
      return function () {
        return window.clearInterval(intervalId);
      };
    }, [interval, player, playbackStateIsNull, playbackState == null ? void 0 : playbackState.paused, durationMS]);
    return playbackState;
  }

  var WebPlaybackSDK = function WebPlaybackSDK(_ref) {
    var children = _ref.children,
        initialDeviceName = _ref.initialDeviceName,
        getOAuthToken = _ref.getOAuthToken,
        initialVolume = _ref.initialVolume,
        _ref$connectOnInitial = _ref.connectOnInitialized,
        connectOnInitialized = _ref$connectOnInitial === void 0 ? true : _ref$connectOnInitial;
    React.useEffect(function () {
      // load Web Playback SDK.
      var script = document.createElement("script");
      script.src = SPOTIFY_WEB_PLAYBACK_SDK_URL;
      document.body.appendChild(script);
      return function () {
        document.body.removeChild(script);
      };
    }, []);
    return React__default['default'].createElement(WebPlaybackSDKReadyProvider, null, React__default['default'].createElement(SpotifyPlayerProvider, {
      initialDeviceName: initialDeviceName,
      getOAuthToken: getOAuthToken,
      initialVolume: initialVolume,
      connectOnInitialized: connectOnInitialized
    }, React__default['default'].createElement(PlaybackStateProvider, null, React__default['default'].createElement(DeviceProvider, null, React__default['default'].createElement(ErrorStateProvider, null, children)))));
  };

  exports.WebPlaybackSDK = WebPlaybackSDK;
  exports.useErrorState = useErrorState;
  exports.usePlaybackState = usePlaybackState;
  exports.usePlayerDevice = usePlayerDevice;
  exports.useSpotifyPlayer = useSpotifyPlayer;
  exports.useWebPlaybackSDKReady = useWebPlaybackSDKReady;

})));
//# sourceMappingURL=index.umd.js.map
