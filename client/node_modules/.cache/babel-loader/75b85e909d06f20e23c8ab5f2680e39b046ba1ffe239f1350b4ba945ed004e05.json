{"ast":null,"code":"import { invariant, isString, messages } from './modules/utils';\nimport parseCSS from './parse-css';\nimport rotate from './rotate';\n/**\n * Get the scheme for a color.\n */\nexport default function scheme(input, type = 'complementary') {\n  invariant(isString(input), messages.inputString);\n  const hex = parseCSS(input);\n  const output = [];\n  switch (type) {\n    case 'analogous':\n      {\n        output.push(rotate(hex, -30), hex, rotate(hex, 30));\n        break;\n      }\n    case 'complementary':\n      {\n        output.push(hex, rotate(hex, 180));\n        break;\n      }\n    case 'split':\n    case 'split-complementary':\n      {\n        output.push(hex, rotate(hex, 150), rotate(hex, 210));\n        break;\n      }\n    case 'triadic':\n      {\n        output.push(hex, rotate(hex, 120), rotate(hex, 240));\n        break;\n      }\n    case 'tetradic':\n    case 'rectangle':\n      {\n        output.push(hex, rotate(hex, 60), rotate(hex, 180), rotate(hex, 240));\n        break;\n      }\n    case 'square':\n      {\n        output.push(hex, rotate(hex, 90), rotate(hex, 180), rotate(hex, 270));\n        break;\n      }\n    default:\n      {\n        throw new TypeError('invalid type');\n      }\n  }\n  return output;\n}","map":{"version":3,"names":["invariant","isString","messages","parseCSS","rotate","scheme","input","type","inputString","hex","output","push","TypeError"],"sources":["/home/adeyinka347/Desktop/spotifyClone/client/node_modules/colorizr/src/scheme.ts"],"sourcesContent":["import { invariant, isString, messages } from './modules/utils';\nimport parseCSS from './parse-css';\nimport rotate from './rotate';\nimport { Scheme } from './types';\n\n/**\n * Get the scheme for a color.\n */\nexport default function scheme(input: string, type: Scheme = 'complementary'): string[] {\n  invariant(isString(input), messages.inputString);\n\n  const hex = parseCSS(input);\n  const output: string[] = [];\n\n  switch (type) {\n    case 'analogous': {\n      output.push(rotate(hex, -30), hex, rotate(hex, 30));\n      break;\n    }\n    case 'complementary': {\n      output.push(hex, rotate(hex, 180));\n      break;\n    }\n\n    case 'split':\n    case 'split-complementary': {\n      output.push(hex, rotate(hex, 150), rotate(hex, 210));\n      break;\n    }\n    case 'triadic': {\n      output.push(hex, rotate(hex, 120), rotate(hex, 240));\n      break;\n    }\n\n    case 'tetradic':\n    case 'rectangle': {\n      output.push(hex, rotate(hex, 60), rotate(hex, 180), rotate(hex, 240));\n      break;\n    }\n    case 'square': {\n      output.push(hex, rotate(hex, 90), rotate(hex, 180), rotate(hex, 270));\n      break;\n    }\n    default: {\n      throw new TypeError('invalid type');\n    }\n  }\n\n  return output;\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,iBAAiB;AAC/D,OAAOC,QAAQ,MAAM,aAAa;AAClC,OAAOC,MAAM,MAAM,UAAU;AAG7B;;;AAGA,eAAc,SAAUC,MAAMA,CAACC,KAAa,EAAEC,IAAA,GAAe,eAAe;EAC1EP,SAAS,CAACC,QAAQ,CAACK,KAAK,CAAC,EAAEJ,QAAQ,CAACM,WAAW,CAAC;EAEhD,MAAMC,GAAG,GAAGN,QAAQ,CAACG,KAAK,CAAC;EAC3B,MAAMI,MAAM,GAAa,EAAE;EAE3B,QAAQH,IAAI;IACV,KAAK,WAAW;MAAE;QAChBG,MAAM,CAACC,IAAI,CAACP,MAAM,CAACK,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEA,GAAG,EAAEL,MAAM,CAACK,GAAG,EAAE,EAAE,CAAC,CAAC;QACnD;;IAEF,KAAK,eAAe;MAAE;QACpBC,MAAM,CAACC,IAAI,CAACF,GAAG,EAAEL,MAAM,CAACK,GAAG,EAAE,GAAG,CAAC,CAAC;QAClC;;IAGF,KAAK,OAAO;IACZ,KAAK,qBAAqB;MAAE;QAC1BC,MAAM,CAACC,IAAI,CAACF,GAAG,EAAEL,MAAM,CAACK,GAAG,EAAE,GAAG,CAAC,EAAEL,MAAM,CAACK,GAAG,EAAE,GAAG,CAAC,CAAC;QACpD;;IAEF,KAAK,SAAS;MAAE;QACdC,MAAM,CAACC,IAAI,CAACF,GAAG,EAAEL,MAAM,CAACK,GAAG,EAAE,GAAG,CAAC,EAAEL,MAAM,CAACK,GAAG,EAAE,GAAG,CAAC,CAAC;QACpD;;IAGF,KAAK,UAAU;IACf,KAAK,WAAW;MAAE;QAChBC,MAAM,CAACC,IAAI,CAACF,GAAG,EAAEL,MAAM,CAACK,GAAG,EAAE,EAAE,CAAC,EAAEL,MAAM,CAACK,GAAG,EAAE,GAAG,CAAC,EAAEL,MAAM,CAACK,GAAG,EAAE,GAAG,CAAC,CAAC;QACrE;;IAEF,KAAK,QAAQ;MAAE;QACbC,MAAM,CAACC,IAAI,CAACF,GAAG,EAAEL,MAAM,CAACK,GAAG,EAAE,EAAE,CAAC,EAAEL,MAAM,CAACK,GAAG,EAAE,GAAG,CAAC,EAAEL,MAAM,CAACK,GAAG,EAAE,GAAG,CAAC,CAAC;QACrE;;IAEF;MAAS;QACP,MAAM,IAAIG,SAAS,CAAC,cAAc,CAAC;;;EAIvC,OAAOF,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}